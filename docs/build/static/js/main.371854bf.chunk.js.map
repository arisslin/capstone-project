{"version":3,"sources":["media/sounds/808kit/OpenHH808.wav","media/sounds/808kit/Rimshot808.wav","media/sounds/808kit/Clave808.wav","media/sounds/808kit/Cowbell808.wav","media/sounds/808kit/LowConga808.wav","media/sounds/808kit/HiConga808.wav","media/sounds/808kit/LowTom808.wav","media/sounds/808kit/HiTom808.wav","media/sounds/808kit/Kick808_2.wav","media/sounds/808kit/Snare808_2.wav","media/sounds/808kit/Shaker808.wav","media/sounds/808kit/Crash808.wav","media/sounds/808kit/Kick808_1.wav","media/sounds/808kit/Snare808_1.wav","media/sounds/808kit/ClosedHH808.wav","media/sounds/808kit/Clap808.wav","common/GlobalStyles.js","common/padsData.js","components/Pad.js","components/PadSection.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createGlobalStyle","padsData","name","url","require","Pad","soundUrl","padPlayer","Player","toMaster","PadStyled","onClick","start","styled","div","PadSection","pads","PadSectionStyled","map","pad","key","section","AppStyled","Boolean","window","location","hostname","match","ReactDOM","render","GlobalStyles","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kIAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,2hBCE5BC,kBAAf,KCFaC,EAAW,CAEtB,CAAEC,KAAM,SAAUC,IAAKC,EAAQ,KAC/B,CAAEF,KAAM,SAAUC,IAAKC,EAAQ,KAC/B,CAAEF,KAAM,SAAUC,IAAKC,EAAQ,KAC/B,CAAEF,KAAM,SAAUC,IAAKC,EAAQ,KAC/B,CAAEF,KAAM,QAASC,IAAKC,EAAQ,KAC9B,CAAEF,KAAM,SAAUC,IAAKC,EAAQ,KAC/B,CAAEF,KAAM,SAAUC,IAAKC,EAAQ,KAC/B,CAAEF,KAAM,SAAUC,IAAKC,EAAQ,KAC/B,CAAEF,KAAM,QAASC,IAAKC,EAAQ,KAC9B,CAAEF,KAAM,QAASC,IAAKC,EAAQ,KAC9B,CAAEF,KAAM,QAASC,IAAKC,EAAQ,KAC9B,CAAEF,KAAM,QAASC,IAAKC,EAAQ,KAC9B,CAAEF,KAAM,QAASC,IAAKC,EAAQ,KAC9B,CAAEF,KAAM,QAASC,IAAKC,EAAQ,KAC9B,CAAEF,KAAM,QAASC,IAAKC,EAAQ,KAC9B,CAAEF,KAAM,QAASC,IAAKC,EAAQ,M,QCPjB,SAASC,EAAT,GAAkC,IAAnBH,EAAkB,EAAlBA,KAAMI,EAAY,EAAZA,SAC5BC,EAAY,IAAIC,SAAOF,GAAUG,WAEvC,OACE,kBAACC,EAAD,CACEC,QAAS,WACPJ,EAAUK,UAGZ,8BAAOV,IAKb,IAAMQ,EAAYG,IAAOC,IAAV,qEAAGD,CAAH,8NCfA,SAASE,EAAT,GAA+B,IAATC,EAAQ,EAARA,KACnC,OAAO,kBAACC,EAAD,KAGED,EAAKE,KAAI,SAAAC,GAAG,OACjB,kBAACd,EAAD,CAAKe,IAAKD,EAAIjB,KAAMA,KAAMiB,EAAIjB,KAAMI,SAAUa,EAAIhB,UAKxD,IAAMc,EAAmBJ,IAAOQ,QAAV,+EAAGR,CAAH,gPCNtB,IAAMS,EAAYT,IAAOC,IAAV,iEAAGD,CAAH,6ZCDKU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,oCACE,kBAACC,EAAD,MACA,mBFJW,WACb,OACE,kBAACR,EAAD,KACE,kBAACP,EAAD,CAAYC,KAAMf,OECpB,OAEF8B,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.371854bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/OpenHH808.a46a6e9a.wav\";","module.exports = __webpack_public_path__ + \"static/media/Rimshot808.b5892d28.wav\";","module.exports = __webpack_public_path__ + \"static/media/Clave808.57a079e5.wav\";","module.exports = __webpack_public_path__ + \"static/media/Cowbell808.144a4c6d.wav\";","module.exports = __webpack_public_path__ + \"static/media/LowConga808.a9a68790.wav\";","module.exports = __webpack_public_path__ + \"static/media/HiConga808.5bcca160.wav\";","module.exports = __webpack_public_path__ + \"static/media/LowTom808.5cfb29ce.wav\";","module.exports = __webpack_public_path__ + \"static/media/HiTom808.3b19b79c.wav\";","module.exports = __webpack_public_path__ + \"static/media/Kick808_2.9766e751.wav\";","module.exports = __webpack_public_path__ + \"static/media/Snare808_2.13b891cb.wav\";","module.exports = __webpack_public_path__ + \"static/media/Shaker808.f2b8fd67.wav\";","module.exports = __webpack_public_path__ + \"static/media/Crash808.039b2daf.wav\";","module.exports = __webpack_public_path__ + \"static/media/Kick808_1.e9505dc8.wav\";","module.exports = __webpack_public_path__ + \"static/media/Snare808_1.398b69ed.wav\";","module.exports = __webpack_public_path__ + \"static/media/ClosedHH808.7d30054f.wav\";","module.exports = __webpack_public_path__ + \"static/media/Clap808.848dbc3f.wav\";","import { createGlobalStyle } from 'styled-components/macro'\n\nexport default createGlobalStyle`\n  :root{\n    /* Colors */\n    --color-dark: #32373a;\n    --color-mpc-chassis: #E8E8E8;\n    --color-pad-grey: #7F7E7A;\n    --blue-grey-light: #A6ADB5;\n    --blue-grey-medium: #7A8490;\n\n    /* spacing */\n    --pad-section-padding: 10px;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n\n  body {\n    margin: 0;\n    font-family: sans-serif;\n    font-size: 16px;    \n  }\n`\n","export const padsData = [\n  // Ordered like the pads in real mpc 2000 xl\n  { name: 'Pad 13', url: require('../media/sounds/808kit/OpenHH808.wav') },\n  { name: 'Pad 14', url: require('../media/sounds/808kit/Rimshot808.wav') },\n  { name: 'Pad 15', url: require('../media/sounds/808kit/Clave808.wav') },\n  { name: 'Pad 16', url: require('../media/sounds/808kit/Cowbell808.wav') },\n  { name: 'Pad 9', url: require('../media/sounds/808kit/LowConga808.wav') },\n  { name: 'Pad 10', url: require('../media/sounds/808kit/HiConga808.wav') },\n  { name: 'Pad 11', url: require('../media/sounds/808kit/LowTom808.wav') },\n  { name: 'Pad 12', url: require('../media/sounds/808kit/HiTom808.wav') },\n  { name: 'Pad 5', url: require('../media/sounds/808kit/Kick808_2.wav') },\n  { name: 'Pad 6', url: require('../media/sounds/808kit/Snare808_2.wav') },\n  { name: 'Pad 7', url: require('../media/sounds/808kit/Shaker808.wav') },\n  { name: 'Pad 8', url: require('../media/sounds/808kit/Crash808.wav') },\n  { name: 'Pad 1', url: require('../media/sounds/808kit/Kick808_1.wav') },\n  { name: 'Pad 2', url: require('../media/sounds/808kit/Snare808_1.wav') },\n  { name: 'Pad 3', url: require('../media/sounds/808kit/ClosedHH808.wav') },\n  { name: 'Pad 4', url: require('../media/sounds/808kit/Clap808.wav') },\n]\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components/macro'\nimport { Player } from 'tone'\n\nPad.propTypes = {\n  name: PropTypes.string.isRequired,\n  soundUrl: PropTypes.string.isRequired,\n}\n\nexport default function Pad({ name, soundUrl }) {\n  const padPlayer = new Player(soundUrl).toMaster()\n\n  return (\n    <PadStyled\n      onClick={() => {\n        padPlayer.start()\n      }}\n    >\n      <span>{name}</span>\n    </PadStyled>\n  )\n}\n\nconst PadStyled = styled.div`\n  position: relative;\n  border: 2px solid var(--color-dark);\n  border-radius: 3px;\n  background-color: var(--color-pad-grey);\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2);\n\n  span {\n    position: absolute;\n    top: -0.7rem;\n    font-size: 0.5rem;\n    color: #3d4448;\n  }\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components/macro'\nimport Pad from './Pad'\n\nPadSection.propTypes = {\n  pads: PropTypes.array.isRequired,\n}\n\nexport default function PadSection({ pads }) {\n  return <PadSectionStyled>{addPads()}</PadSectionStyled>\n\n  function addPads() {\n    return pads.map(pad => (\n      <Pad key={pad.name} name={pad.name} soundUrl={pad.url} />\n    ))\n  }\n}\n\nconst PadSectionStyled = styled.section`\n  grid-area: pad-section;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-template-rows: 1fr 1fr 1fr 1fr;\n  grid-gap: 12px;\n  padding: 12px;\n  border: 2px solid var(--blue-grey-medium);\n  border-radius: 3px;\n  background-color: var(--blue-grey-light);\n`\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport { padsData } from './common/padsData'\nimport PadSection from './components/PadSection'\n\nexport default function App() {\n  return (\n    <AppStyled>\n      <PadSection pads={padsData} />\n    </AppStyled>\n  )\n}\n\nconst AppStyled = styled.div`\n  display: grid;\n\n  height: 100vh;\n  padding: var(--pad-section-padding);\n  background: var(--color-mpc-chassis);\n\n  @media (orientation: landscape) {\n    grid-template-columns: auto calc(100vmin - var(--pad-section-padding) * 2); /* component has square form */\n    grid-template-areas: 'control-section pad-section';\n  }\n\n  @media (orientation: portrait) {\n    grid-template-rows: auto calc(100vmin - var(--pad-section-padding) * 2); /* component has square form */\n    grid-template-areas: 'control-section' 'pad-section';\n  }\n`\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport GlobalStyles from './common/GlobalStyles'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <>\n    <GlobalStyles />\n    <App />\n  </>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}